<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
			            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
			            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			            http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd ">

	<!-- 部署DAO层, 通过此web.xml引入到这里 -->

	<!-- 配置mybatis框架: scan会扫描org.fkit.dao包里的所有接口当作Spring的bean配置, 之后可以进行依赖注入-->
	<mybatis:scan base-package="com.univesre.onlineshop.dao"/>
	
	<!-- 扫描org.fkit包下面的java文件，有Spring的相关注解的类，则把这些类注册为Spring的bean -->
	<context:component-scan base-package="com.univesre.onlineshop"/>
	
	<!-- 使用PropertyOverrideConfigurer后处理器加载数据源(可以理解成一个数据库接口,有了此接口,就有了数据)参数, classpath就是src文件夹 -->
	<context:property-override location="classpath:db.properties"/>
	
	<!-- 配置c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"/>
	
	<!-- 配置SqlSessionFactory, org.mybatis.spring.SqlSessionFactoryBean是Mybatis社区开发用于整合Spring的bean(bean就是一个Java类) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource"/>
	
	<!-- 配置事务管理的代码:JDBC事务管理器 -->
	<bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>
	
	<!-- tx命名空间用于支持事务注解, 通过transaction-manager属性用于指定使用哪个事务管理器, 之后就可以在Java类中使用@Transactional注解给Spring的bean添加事务管理了 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
